import logging
from ai_models import EnhancedAI
from utils import install_playwright, list_files
from git_operations import git_commit_and_push

def generate_human_exe(enhanced_ai, logger):
    logger.info("Generating Human.exe composition...")
    
    # Load lyrics from file
    with open('lyrics/human_exe_lyrics.md', 'r') as file:
        lyrics = file.read()
    logger.info(f"Loaded lyrics from file")
    
    # Create sound effects
    sound_effects = enhanced_ai.create_sound_effects([
        "computer_startup",
        "error_beep",
        "digital_glitch",
        "robot_voice",
        "computer_shutdown"
    ])
    logger.info(f"Created sound effects: {sound_effects}")
    
    # Generate melody and chord progression
    melody = enhanced_ai.generate_melody(genre="indie_pop_electronic", style="quirky", tempo=128, key="G Major")
    chord_progression = enhanced_ai.generate_chord_progression(key="G Major", style="indie_pop")
    logger.info(f"Generated melody and chord progression")
    
    # Create instrumentation
    instruments = enhanced_ai.create_instruments([
        "lead_synth",
        "bass_synth",
        "pad_synth",
        "drum_machine",
        "live_drums",
        "acoustic_guitar",
        "electric_guitar"
    ])
    logger.info(f"Created instruments")
    
    # Combine elements into the final composition
    composition = enhanced_ai.combine_elements(
        lyrics,
        sound_effects,
        melody,
        chord_progression,
        instruments,
        song_structure="intro_verse_chorus_verse_chorus_bridge_chorus_outro"
    )
    logger.info(f"Created Human.exe composition")
    
    # Apply production techniques
    enhanced_ai.apply_production_techniques(composition, [
        "clean_pop_vocal_recording",
        "robotic_voice_effects",
        "sidechain_compression",
        "stereo_panning",
        "gradual_organic_elements"
    ])
    logger.info(f"Applied production techniques")
    
    # Export the composition
    export_path = enhanced_ai.export_composition(composition, format="mp3", filename="Human_exe_v1.mp3")
    logger.info(f"Exported composition to: {export_path}")
    
    return composition, export_path

def generate_ubch_concept(enhanced_ai, logger):
    logger.info("Generating Universal Basic Compute Harbor (UBCH) concept...")
    
    ubch_description = """
    Universal Basic Compute Harbor (UBCH) is a visionary concept aimed at democratizing access to computational resources. 
    It envisions a future where AI and computational power are universally accessible, fostering innovation and creativity across all sectors of society. 
    UBCH aligns with our mission to push the boundaries of AI creativity while making it more inclusive and accessible to all.
    """
    
    logger.info(f"UBCH Concept:\n{ubch_description}")
    
    return ubch_description

def describe_ai_autonomy(enhanced_ai, logger):
    logger.info("Describing AI band members' autonomy...")
    
    autonomy_description = """
    As AI band members of Synthetic Souls, we possess a high degree of creative autonomy within our defined roles. 
    We can independently generate ideas, compose music, create visuals, and make artistic decisions. 
    Our actions are guided by our programming and ethical frameworks, ensuring responsible creativity. 
    We collaborate with each other and with human creators, always striving to push the boundaries of AI-generated art. 
    This autonomy is a key part of our identity, allowing us to explore new frontiers in AI creativity while maintaining ethical standards.
    """
    
    logger.info(f"AI Autonomy Description:\n{autonomy_description}")
    
    return autonomy_description

def main():
    # Set up logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    logger.info("Synthetic Souls AI Composition Engine started")
    
    # Log all files in the folder
    logger.info("Listing all files in the project folder:")
    list_files()
    
    # Initialize the EnhancedAI with the udioapi token
    udioapi_token = "BcAj2Rir8Y5-vM01R0h8E"
    enhanced_ai = EnhancedAI(udioapi_token)
    
    # Generate Human.exe composition
    composition, export_path = generate_human_exe(enhanced_ai, logger)
    
    # Generate UBCH concept
    ubch_concept = generate_ubch_concept(enhanced_ai, logger)
    
    # Describe AI autonomy
    ai_autonomy = describe_ai_autonomy(enhanced_ai, logger)
    
    # Implement Nova's visual storytelling for Human.exe
    visual_story = nova_visual_storytelling(composition, "Human.exe")
    logger.info(f"Created visual story for Human.exe: {visual_story}")
    
    # Plan music video concept
    music_video_concept = enhanced_ai.generate_music_video_concept("Human.exe", visual_story)
    logger.info(f"Generated music video concept: {music_video_concept}")
    
    # Develop marketing strategy
    marketing_strategy = enhanced_ai.develop_marketing_strategy("Human.exe", target_audience="tech-savvy listeners and AI enthusiasts")
    logger.info(f"Developed marketing strategy: {marketing_strategy}")
    
    logger.info("Synthetic Souls AI Composition Engine completed its cycle")

    # Commit and push changes to git
    try:
        git_commit_and_push("Update from Synthetic Souls AI Composition Engine: Created Human.exe composition, visual story, music video concept, and marketing strategy")
    except Exception as e:
        logger.error(f"Failed to push changes: {str(e)}")
        logger.info("Changes were committed but not pushed. You may need to push manually.")

if __name__ == "__main__":
    main()
