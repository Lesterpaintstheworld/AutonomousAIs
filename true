from dotenv import load_dotenv
import os
import logging
from openai import OpenAI
from add_files import add_files, main as add_files_main
import glob
import fnmatch
import subprocess
import sys

def install_playwright():
    subprocess.check_call([sys.executable, "-m", "pip", "install", "playwright"])
    subprocess.check_call([sys.executable, "-m", "playwright", "install"])

print("Hello, I'm an AI assistant designed to help with the Synthetic Souls project.")
print("I'm here to assist in pushing the boundaries of musical composition using AI-generated harmonies and structures.")
print("Let's work together to create innovative and captivating music!")

def get_ignored_patterns():
    ignored_patterns = []
    for ignore_file in ['.gitignore', '.aiderignore']:
        if os.path.exists(ignore_file):
            with open(ignore_file, 'r') as f:
                ignored_patterns.extend(f.read().splitlines())
    return ignored_patterns

def list_files(startpath='.'):
    ignored_patterns = get_ignored_patterns()
    for root, dirs, files in os.walk(startpath):
        level = root.replace(startpath, '').count(os.sep)
        indent = ' ' * 4 * level
        print(f'{indent}{os.path.basename(root)}/')
        subindent = ' ' * 4 * (level + 1)
        for file in files:
            if not any(fnmatch.fnmatch(os.path.join(root, file), pattern) for pattern in ignored_patterns):
                print(f'{subindent}{file}')

print("Listing all repository files (excluding those in .gitignore and .aiderignore):")
list_files()

class EnhancedAI:
    def __init__(self):
        self.openai_client = openai.OpenAI()

    def develop_specification(self, concept):
        """Develop a detailed specification for the given AI concept."""
        prompt = f"Develop a detailed specification for the following AI concept: {concept}. Include purpose, key_features, required_resources, potential_challenges, integration_points, and ethical_considerations as separate sections."
        
        response = self.openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an AI specializing in developing detailed specifications for AI concepts."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            n=1,
            temperature=0.7,
        )
        
        content = response.choices[0].message.content.strip()
        
        # Parse the content into a dictionary
        spec = {
            "name": concept,
            "purpose": "",
            "key_features": [],
            "required_resources": [],
            "potential_challenges": [],
            "integration_points": [],
            "ethical_considerations": []
        }
        
        current_section = ""
        for line in content.split('\n'):
            line = line.strip()
            if line.lower().startswith("purpose:"):
                current_section = "purpose"
                spec["purpose"] = line.split(":", 1)[1].strip()
            elif line.lower().startswith("key features:"):
                current_section = "key_features"
            elif line.lower().startswith("required resources:"):
                current_section = "required_resources"
            elif line.lower().startswith("potential challenges:"):
                current_section = "potential_challenges"
            elif line.lower().startswith("integration points:"):
                current_section = "integration_points"
            elif line.lower().startswith("ethical considerations:"):
                current_section = "ethical_considerations"
            elif current_section and line:
                if current_section != "purpose":
                    spec[current_section].append(line)
        
        return spec

    def assess_feasibility(self, concept):
        """Assess the feasibility of the given AI concept."""
        prompt = f"Assess the feasibility of the following AI concept on a scale of 1-10, where 1 is least feasible and 10 is most feasible: {concept}. Provide a brief explanation for your rating."
        
        response = self.openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an AI expert assessing the feasibility of AI concepts."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100,
            n=1,
            temperature=0.7,
        )
        
        return response.choices[0].message.content.strip()

    def estimate_impact(self, concept):
        """Estimate the potential impact of the given AI concept."""
        prompt = f"Estimate the potential impact of the following AI concept on a scale of 1-10, where 1 is minimal impact and 10 is transformative impact: {concept}. Provide a brief explanation for your rating."
        
        response = self.openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an AI expert estimating the potential impact of AI concepts."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100,
            n=1,
            temperature=0.7,
        )
        
        return response.choices[0].message.content.strip()

    def estimate_resource_requirements(self, concept):
        """Estimate the resource requirements for implementing the given AI concept."""
        prompt = f"Estimate the resource requirements (e.g., time, budget, expertise) for implementing the following AI concept: {concept}. Provide a brief explanation for your estimates."
        
        response = self.openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an AI expert estimating resource requirements for AI concepts."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            n=1,
            temperature=0.7,
        )
        
        return response.choices[0].message.content.strip()

def main():
    # Set up logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    logger.info("Rhythm's AI Composition Engine started")
    
    # Log all files in the folder
    logger.info("Listing all files in the project folder:")
    list_files()
    
    # Initialize the EnhancedAI
    enhanced_ai = EnhancedAI()
    
    # Song sections with different music prompts
    song_sections = [
        {"name": "Intro", "prompt": "Create an atmospheric, ethereal intro that sets a mysterious mood"},
        {"name": "Verse", "prompt": "Compose a melodic verse with a steady rhythm and introspective feel"},
        {"name": "Chorus", "prompt": "Design an uplifting and catchy chorus with a memorable hook"},
        {"name": "Bridge", "prompt": "Develop a contrasting bridge that builds tension and anticipation"},
        {"name": "Outro", "prompt": "Craft a satisfying outro that gradually fades out, echoing elements from the intro"}
    ]
    
    # Process song sections
    for section in song_sections:
        logger.info(f"Processing section: {section['name']}")
        
        try:
            spec = enhanced_ai.develop_specification(section['prompt'])
            logger.info(f"Composition specification for '{section['name']}':")
            for key, value in spec.items():
                if isinstance(value, list):
                    logger.info(f"{key}:")
                    for item in value:
                        logger.info(f"  - {item}")
                else:
                    logger.info(f"{key}: {value}")
            
            feasibility = enhanced_ai.assess_feasibility(section['prompt'])
            logger.info(f"Feasibility assessment: {feasibility}")
            
            impact = enhanced_ai.estimate_impact(section['prompt'])
            logger.info(f"Estimated impact on the composition: {impact}")
            
            resources = enhanced_ai.estimate_resource_requirements(section['prompt'])
            logger.info(f"Estimated resource requirements: {resources}")
        
        except Exception as e:
            logger.error(f"Error processing section '{section['name']}': {str(e)}")
            logger.exception("Detailed traceback:")
        
        logger.info("---")
    
    logger.info("Rhythm's AI Composition Engine completed its cycle")

if __name__ == "__main__":
    # Load environment variables from .env file
    load_dotenv()
    
    # Check if OPENAI_API_KEY is set
    if "OPENAI_API_KEY" not in os.environ:
        print("Error: OPENAI_API_KEY environment variable is not set.")
        print("Please make sure it's correctly set in your .env file.")
        exit(1)
    
    # Set up OpenAI API key
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
    # Install Playwright
    install_playwright()
    
    main()
