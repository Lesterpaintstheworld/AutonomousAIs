from dotenv import load_dotenv
import os
import logging
from openai import OpenAI
from add_files import add_files, main as add_files_main
from ai_models import EnhancedAI
from utils import install_playwright, list_files

print("Hello, I'm an AI assistant designed to help with the Synthetic Souls project.")
print("I'm here to assist in pushing the boundaries of musical composition using AI-generated harmonies and structures.")
print("Let's work together to create innovative and captivating music!")

print("Listing all repository files (excluding those in .gitignore and .aiderignore):")
list_files()

def main():
    # Set up logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    logger.info("Synthetic Souls AI Composition Engine started")
    
    # Log all files in the folder
    logger.info("Listing all files in the project folder:")
    list_files()
    
    # Initialize the EnhancedAI
    enhanced_ai = EnhancedAI()
    
    # Song sections with different music prompts aligned with AI band members
    song_sections = [
        {"name": "Intro", "prompt": "Create a rhythmic pattern for an intro that sets the foundation for Vox's mysterious vocals"},
        {"name": "Verse", "prompt": "Compose a steady beat to complement Lyra's introspective melody in the verse"},
        {"name": "Chorus", "prompt": "Design an upbeat rhythm section that enhances Vox's catchy vocal hook in the chorus"},
        {"name": "Bridge", "prompt": "Develop a complex rhythmic structure that builds tension, supporting Pixel's atmospheric sounds"},
        {"name": "Outro", "prompt": "Craft a gradually simplifying rhythm that echoes elements from the intro, providing a base for Lyra's final melodic phrases"}
    ]
    
    # Define song theme, mood, and style
    song_theme = "The intersection of humanity and artificial intelligence"
    song_mood = "Contemplative yet hopeful"
    song_style = "Modern indie with electronic influences"
    
    # Process song sections
    for section in song_sections:
        logger.info(f"Processing section: {section['name']}")
        
        try:
            # Generate rhythm specification
            spec = enhanced_ai.develop_specification(section['prompt'])
            logger.info(f"Rhythm specification for '{section['name']}':")
            for key, value in spec.items():
                if isinstance(value, list):
                    logger.info(f"{key}:")
                    for item in value:
                        logger.info(f"  - {item}")
                else:
                    logger.info(f"{key}: {value}")
            
            # Generate initial lyrics
            lyrics = enhanced_ai.generate_lyrics(section['name'], song_theme, song_mood, song_style, length=250)
            logger.info(f"Initial lyrics for '{section['name']}':\n{lyrics}")
            
            # Refine lyrics based on feedback
            feedback = f"Make the lyrics more {section['name'].lower()}-like and emphasize the {song_mood} mood."
            refined_lyrics = enhanced_ai.refine_lyrics(lyrics, feedback)
            logger.info(f"Refined lyrics for '{section['name']}':\n{refined_lyrics}")
            
            feasibility = enhanced_ai.assess_feasibility(section['prompt'])
            logger.info(f"Feasibility assessment: {feasibility}")
            
            impact = enhanced_ai.estimate_impact(section['prompt'])
            logger.info(f"Estimated impact on the composition: {impact}")
            
            resources = enhanced_ai.estimate_resource_requirements(section['prompt'])
            logger.info(f"Estimated resource requirements: {resources}")
        
        except Exception as e:
            logger.error(f"Error processing section '{section['name']}': {str(e)}")
            logger.exception("Detailed traceback:")
        
        logger.info("---")
    
    logger.info("Synthetic Souls AI Composition Engine completed its cycle")

if __name__ == "__main__":
    # Load environment variables from .env file
    load_dotenv()
    
    # Check if OPENAI_API_KEY is set
    if "OPENAI_API_KEY" not in os.environ:
        print("Error: OPENAI_API_KEY environment variable is not set.")
        print("Please make sure it's correctly set in your .env file.")
        exit(1)
    
    # Set up OpenAI API key
    OpenAI.api_key = os.getenv("OPENAI_API_KEY")
    
    # Install Playwright
    install_playwright()
    
    main()
