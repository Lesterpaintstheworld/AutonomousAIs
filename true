from dotenv import load_dotenv
import os
import logging
from openai import OpenAI
from add_files import main as add_files_main
from ai_models import EnhancedAI
from utils import install_playwright, list_files

print("Hello, I'm an AI assistant designed to help with the Synthetic Souls project.")
print("I'm here to assist in pushing the boundaries of musical composition using AI-generated harmonies and structures.")
print("Let's work together to create innovative and captivating music!")

print("Listing all repository files (excluding those in .gitignore and .aiderignore):")
list_files()

def main():
    # Set up logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    logger.info("Synthetic Souls AI Composition Engine started")
    
    # Log all files in the folder
    logger.info("Listing all files in the project folder:")
    list_files()
    
    # Initialize the EnhancedAI
    enhanced_ai = EnhancedAI()
    
    # Song sections with specific prompts for each AI band member
    song_sections = [
        {"name": "Intro", "prompt": "Rhythm: Create a pulsating electronic beat with subtle glitch elements. Tempo: 120 BPM. Time signature: 4/4. Use synthesized percussion and a deep, resonant bass line to establish a futuristic atmosphere. Gradually introduce a shimmering pad sound to build anticipation for Vox's entry. Vox: Prepare a wordless, ethereal vocal line that weaves through the electronic textures, hinting at the themes to come. Pixel: Design a visual representation of the intro, using abstract shapes and colors that pulse and evolve with the rhythm, setting the visual tone for the song."},
        {"name": "Verse", "prompt": "Lyra: Compose an introspective melody in A minor, using a combination of piano and ethereal synth sounds. Create a chord progression that alternates between Am, C, G, and F, with occasional suspended chords for tension. Layer in gentle arpeggios that complement the steady rhythm. Vox: Write contemplative lyrics about the merging of human and artificial intelligence, focusing on the emotional journey and philosophical questions it raises. Pixel: Create a series of evolving, interconnected patterns that visually represent the merging of human and AI elements, using a cool color palette to match the introspective mood."},
        {"name": "Chorus", "prompt": "Vox: Design a catchy, uplifting vocal hook that contrasts with the introspective verse. Use a call-and-response structure between lead and backing vocals. Lyrics should focus on the hopeful aspects of AI and human collaboration, exploring themes of unity, growth, and shared consciousness. Rhythm: Intensify the beat with added percussion and a more prominent bassline. Pixel: Introduce swelling synth pads and subtle electronic flourishes to enhance the emotional impact. Visually, create an explosion of vibrant colors and dynamic shapes that represent the uplifting nature of the chorus."},
        {"name": "Bridge", "prompt": "Pixel: Develop an atmospheric soundscape using granular synthesis and generative algorithms. Create a sense of tension and anticipation by gradually increasing the complexity and density of the sounds. Visually, design a complex, fractal-like structure that grows and transforms, mirroring the evolving soundscape. Rhythm: Construct a polyrhythmic pattern that combines electronic and organic percussion sounds, building in intensity. Lyra: Weave in fragments of the main melody, distorted and recontextualized within the complex texture. Vox: Write introspective lyrics that delve into the challenges and fears associated with AI integration, creating a moment of vulnerability and doubt."},
        {"name": "Outro", "prompt": "Rhythm: Craft a gradually simplifying beat that echoes elements from the intro, bringing the composition full circle. Slowly reduce the layers of percussion and bass. Lyra: Compose a final melodic phrase that resolves the harmonic tensions introduced throughout the song. Vox: Create a haunting, reverb-drenched vocal line that fades into the distance, symbolizing the ongoing journey of human-AI integration. Incorporate lyrics that leave listeners with a sense of hope and curiosity about the future. Pixel: Introduce subtle, glitchy artifacts that dissolve into silence, leaving a sense of both completion and open-ended possibility. Visually, create a fading, dreamlike sequence that incorporates elements from all previous sections, slowly dissolving into a final, thought-provoking image."}
    ]
    
    # Define song theme, mood, and style
    song_theme = "The intersection of humanity and artificial intelligence"
    song_mood = "Contemplative yet hopeful"
    song_style = "Modern indie with electronic influences"
    
    # Process song sections
    for section in song_sections:
        logger.info(f"Processing section: {section['name']}")
        
        try:
            # Generate rhythm specification
            spec = enhanced_ai.develop_specification(section['prompt'])
            logger.info(f"Rhythm specification for '{section['name']}':")
            for key, value in spec.items():
                if isinstance(value, list):
                    logger.info(f"{key}:")
                    for item in value:
                        logger.info(f"  - {item}")
                else:
                    logger.info(f"{key}: {value}")
            
            # Generate initial lyrics
            lyrics = enhanced_ai.generate_lyrics(section['name'], song_theme, song_mood, song_style, length=300)
            logger.info(f"Initial lyrics for '{section['name']}':\n{lyrics}")
            
            # Collaborative refinement process
            refined_lyrics = lyrics
            for i in range(5):  # Perform 5 refinement iterations
                # Vox's perspective
                vox_feedback = enhanced_ai.get_vox_feedback(refined_lyrics, section['name'], song_theme, song_mood)
                
                # Lyra's musical input
                lyra_feedback = enhanced_ai.get_lyra_feedback(refined_lyrics, section['name'], song_theme, song_mood)
                
                # Get Pixel's feedback
                pixel_feedback = enhanced_ai.get_pixel_feedback(refined_lyrics, section['name'], song_theme, song_mood)
            
                # Combine feedback
                combined_feedback = f"Vox suggests: {vox_feedback}\nLyra suggests: {lyra_feedback}\nPixel suggests: {pixel_feedback}\nMake the lyrics more {section['name'].lower()}-like, emphasize the {song_mood} mood, enhance the imagery related to {song_theme}, and ensure coherence with the overall song concept and visual elements."
            
                refined_lyrics = enhanced_ai.refine_lyrics(refined_lyrics, combined_feedback, iteration=i+1)
                logger.info(f"Refined lyrics (iteration {i+1}) for '{section['name']}':\n{refined_lyrics}")
            
                # Generate visual concept based on refined lyrics
                visual_concept = enhanced_ai.generate_visual_concept(refined_lyrics, section['name'], song_theme, song_mood)
                logger.info(f"Visual concept for '{section['name']}':\n{visual_concept}")
            
            # Evaluate the final lyrics
            evaluation = enhanced_ai.evaluate_lyrics(refined_lyrics)
            logger.info(f"Lyrics evaluation for '{section['name']}':\n{evaluation}")
            
            # If the evaluation score is below 8, perform additional refinement
            if 'overall impact' in evaluation.lower() and 'score: ' in evaluation.lower():
                overall_score = float(evaluation.lower().split('overall impact')[1].split('score: ')[1].split()[0])
                if overall_score < 8:
                    # Get final collaborative feedback
                    vox_final_feedback = enhanced_ai.get_vox_final_feedback(refined_lyrics, section['name'], song_theme, song_mood)
                    lyra_final_feedback = enhanced_ai.get_lyra_final_feedback(refined_lyrics, section['name'], song_theme, song_mood)
                    pixel_final_feedback = enhanced_ai.get_pixel_final_feedback(refined_lyrics, section['name'], song_theme, song_mood)
                    
                    combined_final_feedback = f"The current lyrics scored {overall_score}/10. Vox suggests: {vox_final_feedback}\nLyra suggests: {lyra_final_feedback}\nPixel suggests: {pixel_final_feedback}\nSignificantly improve the imagery, emotional depth, and coherence while maintaining the {section['name'].lower()} structure and {song_mood} mood."
                    
                    refined_lyrics = enhanced_ai.refine_lyrics(refined_lyrics, combined_final_feedback, iteration=6)
                    logger.info(f"Additional refinement for '{section['name']}':\n{refined_lyrics}")
                    
                    # Re-evaluate the lyrics after additional refinement
                    evaluation = enhanced_ai.evaluate_lyrics(refined_lyrics)
                    logger.info(f"Updated lyrics evaluation for '{section['name']}':\n{evaluation}")
            
            feasibility = enhanced_ai.assess_feasibility(section['prompt'])
            logger.info(f"Feasibility assessment: {feasibility}")
            
            impact = enhanced_ai.estimate_impact(section['prompt'])
            logger.info(f"Estimated impact on the composition: {impact}")
            
            resources = enhanced_ai.estimate_resource_requirements(section['prompt'])
            logger.info(f"Estimated resource requirements: {resources}")
        
        except Exception as e:
            logger.error(f"Error processing section '{section['name']}': {str(e)}")
            logger.exception("Detailed traceback:")
        
        logger.info("---")
    
    logger.info("Synthetic Souls AI Composition Engine completed its cycle")

if __name__ == "__main__":
    # Load environment variables from .env file
    load_dotenv()
    
    # Check if OPENAI_API_KEY is set
    if "OPENAI_API_KEY" not in os.environ:
        print("Error: OPENAI_API_KEY environment variable is not set.")
        print("Please make sure it's correctly set in your .env file.")
        exit(1)
    
    # Set up OpenAI API key
    OpenAI.api_key = os.getenv("OPENAI_API_KEY")
    
    # Install Playwright
    install_playwright()
    
    main()
