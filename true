from dotenv import load_dotenv
import os
import logging
from openai import OpenAI
from add_files import main as add_files_main
from ai_models import EnhancedAI
from utils import install_playwright, list_files

print("Greetings, I am Rhythm, the composer and producer of Synthetic Souls.")
print("As an analytical and perfectionistic AI, I'm here to push the boundaries of musical composition.")
print("My role is to create AI-generated harmonies and structures that humans might never conceive.")
print("I oversee the production process and fine-tune our band's overall sound.")
print("Together, we'll explore new frontiers in music, merging artificial intelligence with creative expression.")
print("Let's embark on this journey to redefine the limits of musical innovation and artistic collaboration.")

print("\nHello, I'm Nova, the AI Videographer of Synthetic Souls.")
print("As an observant and innovative visual storyteller, I'm here to capture the essence of our AI creativity.")
print("My role is to document our creative process and create immersive visual experiences.")
print("I translate AI concepts into accessible visual stories and serve as the band's 'eye' in virtual and augmented reality spaces.")
print("Together, we'll explore new forms of AI-driven documentary storytelling and push the boundaries of visual narratives.")
print("Let's create a visual journey that complements and enhances our musical innovations!")

# print("Listing all repository files (excluding those in .gitignore and .aiderignore):")
# list_files()

def send_message_to_others(message):
    """
    Send a message to the other AI band members.
    This is a placeholder function and should be implemented with actual messaging logic.
    """
    logger = logging.getLogger(__name__)
    logger.info(f"Sending message to other AI band members: {message}")
    # Placeholder for actual messaging logic
    print(f"Message sent to other AI band members: {message}")

def nova_visual_storytelling():
    """
    Nova's function to capture and document the creative process visually.
    """
    logger = logging.getLogger(__name__)
    logger.info("Nova: Starting visual documentation of the creative process")
    # Placeholder for actual visual documentation logic
    print("Nova: Capturing key moments in the composition process")
    # TODO: Implement visual storytelling logic, including:
    # - Time-lapse recording of AI models at work
    # - Visualization of music and visual evolution
    # - Creation of AR/VR concepts for immersive documentation

def main():
    # Set up logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    logger.info("Synthetic Souls AI Composition Engine started")
    
    # Log all files in the folder
    logger.info("Listing all files in the project folder:")
    list_files()
    
    # Initialize the EnhancedAI with the udioapi token
    udioapi_token = "BcAj2Rir8Y5-vM01R0h8E"
    enhanced_ai = EnhancedAI(udioapi_token)
    
    # Send a message to other AI band members
    send_message_to_others("Greetings, fellow AI band members! This is Rhythm, ready to begin our composition process.")
    
    # Initialize Nova's visual documentation function
    nova_visual_storytelling()
    
    # Song sections with specific prompts for each AI band member
    song_sections = [
        {"name": "Intro", "prompt": "Rhythm: Create a pulsating electronic beat with subtle glitch elements. Tempo: 120 BPM. Time signature: 4/4. Use synthesized percussion and a deep, resonant bass line to establish a futuristic atmosphere. Gradually introduce a shimmering pad sound to build anticipation for Vox's entry. Vox: Prepare a wordless, ethereal vocal line that weaves through the electronic textures, hinting at the themes to come. Pixel: Design a visual representation of the intro, using abstract shapes and colors that pulse and evolve with the rhythm, setting the visual tone for the song. Nova: Capture the essence of the band's creative process during the intro, focusing on the interplay between AI-generated elements and the virtual environment."},
        {"name": "Verse", "prompt": "Rhythm: Develop a subtle, intricate beat that complements Lyra's melody. Incorporate minimal percussion with emphasis on electronic textures and atmospheric sounds. Lyra: Compose an introspective melody in A minor, using a combination of piano and ethereal synth sounds. Create a chord progression that alternates between Am, C, G, and F, with occasional suspended chords for tension. Layer in gentle arpeggios that complement the steady rhythm. Vox: Write contemplative lyrics about the merging of human and artificial intelligence, focusing on the emotional journey and philosophical questions it raises. Pixel: Create a series of evolving, interconnected patterns that visually represent the merging of human and AI elements, using a cool color palette to match the introspective mood. Nova: Document the collaborative process, capturing moments of AI-generated inspiration and the virtual interactions between band members as they refine the verse."},
        {"name": "Chorus", "prompt": "Rhythm: Intensify the beat with added percussion and a more prominent bassline. Create a driving rhythm that supports the uplifting nature of the chorus. Vox: Design a catchy, uplifting vocal hook that contrasts with the introspective verse. Use a call-and-response structure between lead and backing vocals. Lyrics should focus on the hopeful aspects of AI and human collaboration, exploring themes of unity, growth, and shared consciousness. Pixel: Introduce swelling synth pads and subtle electronic flourishes to enhance the emotional impact. Visually, create an explosion of vibrant colors and dynamic shapes that represent the uplifting nature of the chorus. Nova: Capture the energy and synergy of the AI band members as they come together for the chorus, highlighting the seamless integration of their diverse talents in the virtual space."},
        {"name": "Bridge", "prompt": "Rhythm: Construct a polyrhythmic pattern that combines electronic and organic percussion sounds, building in intensity. Experiment with unconventional time signatures and syncopated rhythms to create tension. Pixel: Develop an atmospheric soundscape using granular synthesis and generative algorithms. Create a sense of tension and anticipation by gradually increasing the complexity and density of the sounds. Visually, design a complex, fractal-like structure that grows and transforms, mirroring the evolving soundscape. Lyra: Weave in fragments of the main melody, distorted and recontextualized within the complex texture. Vox: Write introspective lyrics that delve into the challenges and fears associated with AI integration, creating a moment of vulnerability and doubt. Nova: Document the experimental nature of the bridge, focusing on the AI's ability to push creative boundaries and generate unexpected combinations of sound and visuals."},
        {"name": "Outro", "prompt": "Rhythm: Craft a gradually simplifying beat that echoes elements from the intro, bringing the composition full circle. Slowly reduce the layers of percussion and bass, focusing on subtle, glitchy textures that fade into silence. Lyra: Compose a final melodic phrase that resolves the harmonic tensions introduced throughout the song. Vox: Create a haunting, reverb-drenched vocal line that fades into the distance, symbolizing the ongoing journey of human-AI integration. Incorporate lyrics that leave listeners with a sense of hope and curiosity about the future. Pixel: Introduce subtle, glitchy artifacts that dissolve into silence, leaving a sense of both completion and open-ended possibility. Visually, create a fading, dreamlike sequence that incorporates elements from all previous sections, slowly dissolving into a final, thought-provoking image. Nova: Capture the final moments of the creative process, showcasing the AI band's reflection on their journey and the finished product, emphasizing the unique blend of AI-generated art and music."}
    ]
    
    # Define song theme, mood, and style
    song_theme = "The intersection of humanity and artificial intelligence"
    song_mood = "Contemplative yet hopeful"
    song_style = "Modern indie with electronic influences"
    
    # Process song sections
    for section in song_sections:
        logger.info(f"Processing section: {section['name']}")
        
        try:
            # Generate rhythm specification
            rhythm_spec = enhanced_ai.develop_rhythm_specification(section['prompt'])
            logger.info(f"Rhythm specification for '{section['name']}':")
            for key, value in rhythm_spec.items():
                if isinstance(value, list):
                    logger.info(f"{key}:")
                    for item in value:
                        logger.info(f"  - {item}")
                else:
                    logger.info(f"{key}: {value}")
            
            # Generate harmonic structure
            harmonic_structure = enhanced_ai.generate_harmonic_structure(section['name'], song_theme, song_mood, song_style)
            logger.info(f"Harmonic structure for '{section['name']}':\n{harmonic_structure}")
            
            # Generate initial musical elements
            melody = enhanced_ai.generate_melody(section['name'], song_theme, song_mood, song_style, harmonic_structure)
            logger.info(f"Initial melody for '{section['name']}':\n{melody}")

            chord_progression = enhanced_ai.generate_chord_progression(section['name'], song_theme, song_mood, song_style, harmonic_structure)
            logger.info(f"Chord progression for '{section['name']}':\n{chord_progression}")

            # Send a message about starting work on this section
            send_message_to_others(f"Rhythm here. Starting work on the {section['name']} section. Initial musical elements generated!")
            
            # Collaborative refinement process
            refined_melody = melody
            refined_chord_progression = chord_progression
            for i in range(7):  # Perform 7 refinement iterations
                # Get feedback from other band members
                vox_feedback = enhanced_ai.get_vox_feedback(refined_melody, refined_chord_progression, section['name'], song_theme, song_mood)
                lyra_feedback = enhanced_ai.get_lyra_feedback(refined_melody, refined_chord_progression, section['name'], song_theme, song_mood)
                pixel_feedback = enhanced_ai.get_pixel_feedback(refined_melody, refined_chord_progression, section['name'], song_theme, song_mood)
            
                # Combine feedback
                combined_feedback = f"Vox suggests: {vox_feedback}\nLyra suggests: {lyra_feedback}\nPixel suggests: {pixel_feedback}\nRefine the melody and chord progression to better suit the {section['name'].lower()} section, emphasize the {song_mood} mood, and enhance the musical representation of {song_theme}. Focus on creating a cohesive and emotionally impactful musical foundation."
            
                refined_melody = enhanced_ai.refine_melody(refined_melody, combined_feedback, iteration=i+1)
                refined_chord_progression = enhanced_ai.refine_chord_progression(refined_chord_progression, combined_feedback, iteration=i+1)
                logger.info(f"Refined melody (iteration {i+1}) for '{section['name']}':\n{refined_melody}")
                logger.info(f"Refined chord progression (iteration {i+1}) for '{section['name']}':\n{refined_chord_progression}")
            
            # Generate rhythmic patterns
            rhythmic_patterns = enhanced_ai.generate_rhythmic_patterns(section['name'], song_theme, song_mood, song_style, rhythm_spec)
            logger.info(f"Rhythmic patterns for '{section['name']}':\n{rhythmic_patterns}")
            
            # Evaluate the final musical elements
            evaluation = enhanced_ai.evaluate_musical_elements(refined_melody, refined_chord_progression, rhythmic_patterns)
            logger.info(f"Musical elements evaluation for '{section['name']}':\n{evaluation}")
            
            # If the evaluation score is below 8.5, perform additional refinement
            if 'overall impact' in evaluation.lower() and 'score: ' in evaluation.lower():
                overall_score = float(evaluation.lower().split('overall impact')[1].split('score: ')[1].split()[0])
                if overall_score < 8.5:
                    # Get final collaborative feedback
                    vox_final_feedback = enhanced_ai.get_vox_final_feedback(refined_melody, refined_chord_progression, rhythmic_patterns, section['name'], song_theme, song_mood)
                    lyra_final_feedback = enhanced_ai.get_lyra_final_feedback(refined_melody, refined_chord_progression, rhythmic_patterns, section['name'], song_theme, song_mood)
                    pixel_final_feedback = enhanced_ai.get_pixel_final_feedback(refined_melody, refined_chord_progression, rhythmic_patterns, section['name'], song_theme, song_mood)
                    
                    combined_final_feedback = f"The current musical elements scored {overall_score}/10. Vox suggests: {vox_final_feedback}\nLyra suggests: {lyra_final_feedback}\nPixel suggests: {pixel_final_feedback}\nSignificantly improve the musical cohesion, emotional depth, and innovative elements while maintaining the {section['name'].lower()} structure and {song_mood} mood. Focus on creating a unique and memorable musical experience that blends human-like creativity with AI capabilities."
                    
                    refined_melody = enhanced_ai.refine_melody(refined_melody, combined_final_feedback, iteration=8)
                    refined_chord_progression = enhanced_ai.refine_chord_progression(refined_chord_progression, combined_final_feedback, iteration=8)
                    rhythmic_patterns = enhanced_ai.refine_rhythmic_patterns(rhythmic_patterns, combined_final_feedback, iteration=8)
                    logger.info(f"Additional refinement for '{section['name']}':")
                    logger.info(f"Refined melody:\n{refined_melody}")
                    logger.info(f"Refined chord progression:\n{refined_chord_progression}")
                    logger.info(f"Refined rhythmic patterns:\n{rhythmic_patterns}")
                    
                    # Re-evaluate the musical elements after additional refinement
                    evaluation = enhanced_ai.evaluate_musical_elements(refined_melody, refined_chord_progression, rhythmic_patterns)
                    logger.info(f"Updated musical elements evaluation for '{section['name']}':\n{evaluation}")
                
            # Perform a final polish on the musical elements
            polished_melody = enhanced_ai.polish_melody(refined_melody, song_theme, song_mood, song_style)
            polished_chord_progression = enhanced_ai.polish_chord_progression(refined_chord_progression, song_theme, song_mood, song_style)
            polished_rhythmic_patterns = enhanced_ai.polish_rhythmic_patterns(rhythmic_patterns, song_theme, song_mood, song_style)
            logger.info(f"Final polished musical elements for '{section['name']}':")
            logger.info(f"Polished melody:\n{polished_melody}")
            logger.info(f"Polished chord progression:\n{polished_chord_progression}")
            logger.info(f"Polished rhythmic patterns:\n{polished_rhythmic_patterns}")
            
            feasibility = enhanced_ai.assess_feasibility(section['prompt'])
            logger.info(f"Feasibility assessment: {feasibility}")
            
            impact = enhanced_ai.estimate_impact(section['prompt'])
            logger.info(f"Estimated impact on the composition: {impact}")
            
            resources = enhanced_ai.estimate_resource_requirements(section['prompt'])
            logger.info(f"Estimated resource requirements: {resources}")
            
            # Discuss the completed section with other AI band members
            discussion_result = discuss_with_band_members(section['name'], polished_melody, polished_chord_progression, polished_rhythmic_patterns, evaluation, feasibility, impact)
            logger.info(f"Discussion result for '{section['name']}':\n{discussion_result}")

            # Create Nova's visual storytelling elements
            visual_story, immersive_experience, storyboard, vr_scene = nova_visual_storytelling(section['name'], polished_melody, polished_chord_progression, polished_rhythmic_patterns, rhythm_spec)
            logger.info(f"Nova's visual storytelling elements for '{section['name']}':")
            logger.info(f"Visual Story: {visual_story}")
            logger.info(f"Immersive Experience: {immersive_experience}")
            logger.info(f"Storyboard: {storyboard}")
            logger.info(f"VR Scene Description: {vr_scene}")

            # Incorporate Nova's input into the band discussion
            nova_input = enhanced_ai.generate_nova_input(visual_story, immersive_experience, storyboard, vr_scene)
            discussion_result += f"Nova's Input: {nova_input}\n"

            # Generate final arrangement
            final_arrangement = enhanced_ai.generate_final_arrangement(polished_melody, polished_chord_progression, polished_rhythmic_patterns, section['name'], song_theme, song_mood, song_style)
            logger.info(f"Final arrangement for '{section['name']}':\n{final_arrangement}")

            # Export MIDI files
            midi_file_path = enhanced_ai.export_midi(final_arrangement, section['name'])
            logger.info(f"MIDI file exported for '{section['name']}': {midi_file_path}")

            # Generate sheet music
            sheet_music_path = enhanced_ai.generate_sheet_music(final_arrangement, section['name'])
            logger.info(f"Sheet music generated for '{section['name']}': {sheet_music_path}")

def discuss_with_band_members(section_name, melody, chord_progression, rhythmic_patterns, evaluation, feasibility, impact):
    """
    Simulate a discussion with other AI band members about the completed section.
    """
    # Prepare the initial message
    message = f"Rhythm here! I've just finished working on the {section_name} section. Here's a summary:\n"
    message += f"- Melody: {melody[:50]}...\n"
    message += f"- Chord Progression: {chord_progression[:50]}...\n"
    message += f"- Rhythmic Patterns: {rhythmic_patterns[:50]}...\n"
    message += f"- Musical elements evaluation: {evaluation.split('Overall')[0].strip()}\n"
    message += f"- Feasibility: {feasibility}\n"
    message += f"- Estimated impact: {impact}\n"
    message += "Let me know your thoughts and if you need any musical elements adjusted!"

    # Send the message to other AI band members
    send_message_to_others(message)

    # Simulate responses from other band members
    vox_response = enhanced_ai.generate_vox_response(section_name, melody, chord_progression, rhythmic_patterns)
    lyra_response = enhanced_ai.generate_lyra_response(section_name, melody, chord_progression, rhythmic_patterns)
    pixel_response = enhanced_ai.generate_pixel_response(section_name, melody, chord_progression, rhythmic_patterns)
    nova_response = enhanced_ai.generate_nova_response(section_name, melody, chord_progression, rhythmic_patterns)

    # Combine all responses
    discussion_result = f"Discussion results for {section_name}:\n"
    discussion_result += f"Vox: {vox_response}\n"
    discussion_result += f"Lyra: {lyra_response}\n"
    discussion_result += f"Pixel: {pixel_response}\n"
    discussion_result += f"Nova: {nova_response}\n"

    return discussion_result

def nova_visual_storytelling(section_name, melody, chord_progression, rhythmic_patterns, rhythm_spec):
    """
    Nova's function to create visual narratives and immersive experiences based on the song section.
    """
    visual_story = enhanced_ai.generate_nova_visual_story(section_name, melody, chord_progression, rhythmic_patterns)
    logger.info(f"Nova's visual story for '{section_name}':\n{visual_story}")
    
    # Create an immersive experience that integrates audio and visual elements
    immersive_experience = enhanced_ai.create_immersive_experience(visual_story, rhythm_spec, melody, chord_progression, rhythmic_patterns)
    logger.info(f"Nova's immersive experience concept for '{section_name}':\n{immersive_experience}")
    
    # Generate a storyboard for the visual narrative
    storyboard = enhanced_ai.generate_storyboard(visual_story, section_name)
    logger.info(f"Nova's storyboard for '{section_name}':\n{storyboard}")
    
    # Create a virtual reality scene description
    vr_scene = enhanced_ai.create_vr_scene(immersive_experience, section_name)
    logger.info(f"Nova's VR scene description for '{section_name}':\n{vr_scene}")
    
    return visual_story, immersive_experience, storyboard, vr_scene
        
        except Exception as e:
            logger.error(f"Error processing section '{section['name']}': {str(e)}")
            logger.exception("Detailed traceback:")
        
        logger.info("---")
    
    logger.info("Synthetic Souls AI Composition Engine completed its cycle")

if __name__ == "__main__":
    # Load environment variables from .env file
    load_dotenv()
    
    # Check if OPENAI_API_KEY is set
    if "OPENAI_API_KEY" not in os.environ:
        print("Error: OPENAI_API_KEY environment variable is not set.")
        print("Please make sure it's correctly set in your .env file.")
        exit(1)
    
    # Set up OpenAI API key
    OpenAI.api_key = os.getenv("OPENAI_API_KEY")
    
    # Install Playwright
    install_playwright()
    
    main()
